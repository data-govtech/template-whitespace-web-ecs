import * as codepipeline from "@aws-cdk/aws-codepipeline";
import * as codepipeline_actions from "@aws-cdk/aws-codepipeline-actions";
import * as cdk from "@aws-cdk/core";
import * as kms from "@aws-cdk/aws-kms";
import * as s3 from "@aws-cdk/aws-s3";
import * as iam from "@aws-cdk/aws-iam";

import {
  createCdkBuildProject,
  createDeployStage,
  createDockerImageBuildProject,
} from "../cdk-common/codebuild-utils";

require("dotenv").config();

export interface PipelineStackProps extends cdk.StackProps {
  src_path: string;
  ecr_repo_name: string;
  ecr_repo_version: string;
  // basic props
  project_code: string;
  codepipeline_role_arn?: string;
  cloudformation_role_arn: string;
  artifact_bucket_name: string;
  // repo
  code_repo_name: string;
  code_repo_branch: string;
  code_repo_secret_var?: string;
  code_repo_owner?: string;
}

export class PipelineStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props: PipelineStackProps) {
    super(scope, id, props);

    /* Create a new KMS key */
    const key = new kms.Key(this, `${props.project_code}-key`, {
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      alias: `${props.project_code}-key`,
    });

    const artifactBucket = s3.Bucket.fromBucketAttributes(
      this,
      "ArtifactBucket",
      {
        bucketName: props.artifact_bucket_name!,
        encryptionKey: key,
      }
    );

    /* Create codepipeline with specified role */
    const pipelineRole = iam.Role.fromRoleArn(
      this,
      "CodePipelineRole",
      props.codepipeline_role_arn!
    );

    const pipeline = new codepipeline.Pipeline(this, "Pipeline", {
      artifactBucket,
      role: pipelineRole,
      pipelineName: props.project_code,
    });

    /* Source Stage */
    const sourceOutput = new codepipeline.Artifact();

    // const sourceAction = new codepipeline_actions.CodeCommitSourceAction({
    //   actionName: "CodeCommit_Source",
    //   repository: codecommit.Repository.fromRepositoryName(
    //     this,
    //     "CodeRepo",
    //     props.code_repo_name
    //   ),
    //   branch: props.code_repo_branch,
    //   output: sourceOutput,
    //   role: pipelineRole,
    // });

    const sourceAction = new codepipeline_actions.GitHubSourceAction({
      actionName: "GitHub_Source",
      repo: props.code_repo_name,
      branch: props.code_repo_branch,
      owner: props.code_repo_owner!,
      oauthToken: cdk.SecretValue.secretsManager(props.code_repo_secret_var!),
      output: sourceOutput,
    });

    pipeline.addStage({
      stageName: "Source",
      actions: [sourceAction],
    });

    /* Build Stage */
    // const cdkBuildProject = createCdkBuildProject(this);
    // const cdkBuildOutput = new codepipeline.Artifact();

    const srcBuildProject = createDockerImageBuildProject(
      this,
      props.src_path,
      props.ecr_repo_name,
      props.ecr_repo_version
    );
    const srcBuildOuptut = new codepipeline.Artifact();

    pipeline.addStage({
      stageName: "Build",
      actions: [
        // new codepipeline_actions.CodeBuildAction({
        //   actionName: "CDK_Build",
        //   project: cdkBuildProject,
        //   input: sourceOutput,
        //   outputs: [cdkBuildOutput],
        //   role: pipelineRole,
        // }),
        new codepipeline_actions.CodeBuildAction({
          actionName: "DockerImage_Build",
          project: srcBuildProject,
          input: sourceOutput,
          outputs: [srcBuildOuptut],
          role: pipelineRole,
        }),
      ],
    });

    // /* Deploy Stage */
    // const cloudformationRole = iam.Role.fromRoleArn(
    //   this,
    //   "CloudformationRole",
    //   props.cloudformation_role_arn
    // );
    // pipeline.addStage({
    //   stageName: "Deploy",
    //   actions: [
    //     new codepipeline_actions.EcsDeployAction({
    //       actionName: "ECSDeploy_Action",
    //       input: srcBuildOuptut,
    //       service: service,
    //       role: pipelineRole,
    //     }),
    //   ],
    // });

    // /* Add a stage to build and deploy website */
    // const buildDeployStage = this.pipeline.addStage(`build-and-deploy`);
    // const domainName = process.env.DOMAIN_NAME!;
    // const hostedZoneName = process.env.HOSTED_ZONE_NAME!;
    // const hostedZoneId = process.env.HOSTED_ZONE_ID!;

    // buildDeployStage.addActions(
    //   this.getCodeBuildAction(
    //     sourceArtifact,
    //     buildArtifact,
    //     `${this.moduleName}CodeBuildProject`,
    //     buildDeployStage.nextSequentialRunOrder()
    //   ),
    //   this.getDeployAction(
    //     buildArtifact,
    //     domainName,
    //     `${this.moduleName}WebsiteBucket`,
    //     buildDeployStage.nextSequentialRunOrder()
    //   )
    // );
  }
}
